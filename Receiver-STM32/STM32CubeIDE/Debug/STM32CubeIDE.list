
STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003348  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003510  08003510  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003510  08003510  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003510  08003510  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000024  0800353c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b8  0800353c  000210b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6e4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fd  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cc4  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ed  00000000  00000000  00056754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecbcd  00000000  00000000  00064141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c4  00000000  00000000  00150d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034b8 	.word	0x080034b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080034b8 	.word	0x080034b8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fddc 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f9f6 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fad2 	bl	800077c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 fa42 	bl	8000660 <MX_SPI1_Init>
  MX_TIM2_Init();
 80001dc:	f000 fa7e 	bl	80006dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  
  // Inizializiraj in splakni SPI buffer
  HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 80001e0:	2364      	movs	r3, #100	; 0x64
 80001e2:	2206      	movs	r2, #6
 80001e4:	49bf      	ldr	r1, [pc, #764]	; (80004e4 <main+0x31c>)
 80001e6:	48c0      	ldr	r0, [pc, #768]	; (80004e8 <main+0x320>)
 80001e8:	f001 fffb 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 80001ec:	2364      	movs	r3, #100	; 0x64
 80001ee:	2206      	movs	r2, #6
 80001f0:	49bc      	ldr	r1, [pc, #752]	; (80004e4 <main+0x31c>)
 80001f2:	48bd      	ldr	r0, [pc, #756]	; (80004e8 <main+0x320>)
 80001f4:	f001 fff5 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2206      	movs	r2, #6
 80001fc:	49b9      	ldr	r1, [pc, #740]	; (80004e4 <main+0x31c>)
 80001fe:	48ba      	ldr	r0, [pc, #744]	; (80004e8 <main+0x320>)
 8000200:	f001 ffef 	bl	80021e2 <HAL_SPI_Transmit>
	
	
	// Nastavi RX naslov za 0. pipo
	//LSBajt gre prvi
	TxSPI[0] = 0x0A | (1 << 5);
 8000204:	4bb7      	ldr	r3, [pc, #732]	; (80004e4 <main+0x31c>)
 8000206:	222a      	movs	r2, #42	; 0x2a
 8000208:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0xE1;
 800020a:	4bb6      	ldr	r3, [pc, #728]	; (80004e4 <main+0x31c>)
 800020c:	22e1      	movs	r2, #225	; 0xe1
 800020e:	705a      	strb	r2, [r3, #1]
	TxSPI[2] = 0xF0;
 8000210:	4bb4      	ldr	r3, [pc, #720]	; (80004e4 <main+0x31c>)
 8000212:	22f0      	movs	r2, #240	; 0xf0
 8000214:	709a      	strb	r2, [r3, #2]
	TxSPI[3] = 0xF0;
 8000216:	4bb3      	ldr	r3, [pc, #716]	; (80004e4 <main+0x31c>)
 8000218:	22f0      	movs	r2, #240	; 0xf0
 800021a:	70da      	strb	r2, [r3, #3]
	TxSPI[4] = 0xE8;
 800021c:	4bb1      	ldr	r3, [pc, #708]	; (80004e4 <main+0x31c>)
 800021e:	22e8      	movs	r2, #232	; 0xe8
 8000220:	711a      	strb	r2, [r3, #4]
	TxSPI[5] = 0xE8;
 8000222:	4bb0      	ldr	r3, [pc, #704]	; (80004e4 <main+0x31c>)
 8000224:	22e8      	movs	r2, #232	; 0xe8
 8000226:	715a      	strb	r2, [r3, #5]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	48af      	ldr	r0, [pc, #700]	; (80004ec <main+0x324>)
 800022e:	f001 f907 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 8000232:	2364      	movs	r3, #100	; 0x64
 8000234:	2206      	movs	r2, #6
 8000236:	49ab      	ldr	r1, [pc, #684]	; (80004e4 <main+0x31c>)
 8000238:	48ab      	ldr	r0, [pc, #684]	; (80004e8 <main+0x320>)
 800023a:	f001 ffd2 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2140      	movs	r1, #64	; 0x40
 8000242:	48aa      	ldr	r0, [pc, #680]	; (80004ec <main+0x324>)
 8000244:	f001 f8fc 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi RX naslov za 1. pipo
	//LSBajt gre prvi
	TxSPI[0] = 0x0B | (1 << 5);
 8000248:	4ba6      	ldr	r3, [pc, #664]	; (80004e4 <main+0x31c>)
 800024a:	222b      	movs	r2, #43	; 0x2b
 800024c:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x77;
 800024e:	4ba5      	ldr	r3, [pc, #660]	; (80004e4 <main+0x31c>)
 8000250:	2277      	movs	r2, #119	; 0x77
 8000252:	705a      	strb	r2, [r3, #1]
	TxSPI[2] = 0xF0;
 8000254:	4ba3      	ldr	r3, [pc, #652]	; (80004e4 <main+0x31c>)
 8000256:	22f0      	movs	r2, #240	; 0xf0
 8000258:	709a      	strb	r2, [r3, #2]
	TxSPI[3] = 0xF0;
 800025a:	4ba2      	ldr	r3, [pc, #648]	; (80004e4 <main+0x31c>)
 800025c:	22f0      	movs	r2, #240	; 0xf0
 800025e:	70da      	strb	r2, [r3, #3]
	TxSPI[4] = 0xE8;
 8000260:	4ba0      	ldr	r3, [pc, #640]	; (80004e4 <main+0x31c>)
 8000262:	22e8      	movs	r2, #232	; 0xe8
 8000264:	711a      	strb	r2, [r3, #4]
	TxSPI[5] = 0xE8;
 8000266:	4b9f      	ldr	r3, [pc, #636]	; (80004e4 <main+0x31c>)
 8000268:	22e8      	movs	r2, #232	; 0xe8
 800026a:	715a      	strb	r2, [r3, #5]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2140      	movs	r1, #64	; 0x40
 8000270:	489e      	ldr	r0, [pc, #632]	; (80004ec <main+0x324>)
 8000272:	f001 f8e5 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	2206      	movs	r2, #6
 800027a:	499a      	ldr	r1, [pc, #616]	; (80004e4 <main+0x31c>)
 800027c:	489a      	ldr	r0, [pc, #616]	; (80004e8 <main+0x320>)
 800027e:	f001 ffb0 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2140      	movs	r1, #64	; 0x40
 8000286:	4899      	ldr	r0, [pc, #612]	; (80004ec <main+0x324>)
 8000288:	f001 f8da 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);*/
	
	// Vklopi RX pipe 0, 1, 2
	//LSBajt gre prvi
	TxSPI[0] = 0x02 | (1 << 5);
 800028c:	4b95      	ldr	r3, [pc, #596]	; (80004e4 <main+0x31c>)
 800028e:	2222      	movs	r2, #34	; 0x22
 8000290:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x07;
 8000292:	4b94      	ldr	r3, [pc, #592]	; (80004e4 <main+0x31c>)
 8000294:	2207      	movs	r2, #7
 8000296:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	4893      	ldr	r0, [pc, #588]	; (80004ec <main+0x324>)
 800029e:	f001 f8cf 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 80002a2:	2364      	movs	r3, #100	; 0x64
 80002a4:	2202      	movs	r2, #2
 80002a6:	498f      	ldr	r1, [pc, #572]	; (80004e4 <main+0x31c>)
 80002a8:	488f      	ldr	r0, [pc, #572]	; (80004e8 <main+0x320>)
 80002aa:	f001 ff9a 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2140      	movs	r1, #64	; 0x40
 80002b2:	488e      	ldr	r0, [pc, #568]	; (80004ec <main+0x324>)
 80002b4:	f001 f8c4 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi TX naslov
	//LSBajt gre prvi
	TxSPI[0] = 0x10 | (1 << 5);
 80002b8:	4b8a      	ldr	r3, [pc, #552]	; (80004e4 <main+0x31c>)
 80002ba:	2230      	movs	r2, #48	; 0x30
 80002bc:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0xE1;
 80002be:	4b89      	ldr	r3, [pc, #548]	; (80004e4 <main+0x31c>)
 80002c0:	22e1      	movs	r2, #225	; 0xe1
 80002c2:	705a      	strb	r2, [r3, #1]
	TxSPI[2] = 0xF0;
 80002c4:	4b87      	ldr	r3, [pc, #540]	; (80004e4 <main+0x31c>)
 80002c6:	22f0      	movs	r2, #240	; 0xf0
 80002c8:	709a      	strb	r2, [r3, #2]
	TxSPI[3] = 0xF0;
 80002ca:	4b86      	ldr	r3, [pc, #536]	; (80004e4 <main+0x31c>)
 80002cc:	22f0      	movs	r2, #240	; 0xf0
 80002ce:	70da      	strb	r2, [r3, #3]
	TxSPI[4] = 0xE8;
 80002d0:	4b84      	ldr	r3, [pc, #528]	; (80004e4 <main+0x31c>)
 80002d2:	22e8      	movs	r2, #232	; 0xe8
 80002d4:	711a      	strb	r2, [r3, #4]
	TxSPI[5] = 0xE8;
 80002d6:	4b83      	ldr	r3, [pc, #524]	; (80004e4 <main+0x31c>)
 80002d8:	22e8      	movs	r2, #232	; 0xe8
 80002da:	715a      	strb	r2, [r3, #5]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2140      	movs	r1, #64	; 0x40
 80002e0:	4882      	ldr	r0, [pc, #520]	; (80004ec <main+0x324>)
 80002e2:	f001 f8ad 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 6, 100);
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	2206      	movs	r2, #6
 80002ea:	497e      	ldr	r1, [pc, #504]	; (80004e4 <main+0x31c>)
 80002ec:	487e      	ldr	r0, [pc, #504]	; (80004e8 <main+0x320>)
 80002ee:	f001 ff78 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	487d      	ldr	r0, [pc, #500]	; (80004ec <main+0x324>)
 80002f8:	f001 f8a2 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi 14 bajtov za sprejem za 0. pipo
	TxSPI[0] = 0x11 | (1 << 5);
 80002fc:	4b79      	ldr	r3, [pc, #484]	; (80004e4 <main+0x31c>)
 80002fe:	2231      	movs	r2, #49	; 0x31
 8000300:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 14;
 8000302:	4b78      	ldr	r3, [pc, #480]	; (80004e4 <main+0x31c>)
 8000304:	220e      	movs	r2, #14
 8000306:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2140      	movs	r1, #64	; 0x40
 800030c:	4877      	ldr	r0, [pc, #476]	; (80004ec <main+0x324>)
 800030e:	f001 f897 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000312:	2364      	movs	r3, #100	; 0x64
 8000314:	2202      	movs	r2, #2
 8000316:	4973      	ldr	r1, [pc, #460]	; (80004e4 <main+0x31c>)
 8000318:	4873      	ldr	r0, [pc, #460]	; (80004e8 <main+0x320>)
 800031a:	f001 ff62 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2140      	movs	r1, #64	; 0x40
 8000322:	4872      	ldr	r0, [pc, #456]	; (80004ec <main+0x324>)
 8000324:	f001 f88c 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi 14 bajtov za sprejem za 1. pipo
	TxSPI[0] = 0x12 | (1 << 5);
 8000328:	4b6e      	ldr	r3, [pc, #440]	; (80004e4 <main+0x31c>)
 800032a:	2232      	movs	r2, #50	; 0x32
 800032c:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 14;
 800032e:	4b6d      	ldr	r3, [pc, #436]	; (80004e4 <main+0x31c>)
 8000330:	220e      	movs	r2, #14
 8000332:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2140      	movs	r1, #64	; 0x40
 8000338:	486c      	ldr	r0, [pc, #432]	; (80004ec <main+0x324>)
 800033a:	f001 f881 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	2202      	movs	r2, #2
 8000342:	4968      	ldr	r1, [pc, #416]	; (80004e4 <main+0x31c>)
 8000344:	4868      	ldr	r0, [pc, #416]	; (80004e8 <main+0x320>)
 8000346:	f001 ff4c 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4867      	ldr	r0, [pc, #412]	; (80004ec <main+0x324>)
 8000350:	f001 f876 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi 14 bajtov za sprejem za 2. pipo
	TxSPI[0] = 0x13 | (1 << 5);
 8000354:	4b63      	ldr	r3, [pc, #396]	; (80004e4 <main+0x31c>)
 8000356:	2233      	movs	r2, #51	; 0x33
 8000358:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 14;
 800035a:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <main+0x31c>)
 800035c:	220e      	movs	r2, #14
 800035e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4861      	ldr	r0, [pc, #388]	; (80004ec <main+0x324>)
 8000366:	f001 f86b 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	2202      	movs	r2, #2
 800036e:	495d      	ldr	r1, [pc, #372]	; (80004e4 <main+0x31c>)
 8000370:	485d      	ldr	r0, [pc, #372]	; (80004e8 <main+0x320>)
 8000372:	f001 ff36 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	485c      	ldr	r0, [pc, #368]	; (80004ec <main+0x324>)
 800037c:	f001 f860 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi TX in vklopi
	TxSPI[0] = 0x00 | (1 << 5);
 8000380:	4b58      	ldr	r3, [pc, #352]	; (80004e4 <main+0x31c>)
 8000382:	2220      	movs	r2, #32
 8000384:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x0E;
 8000386:	4b57      	ldr	r3, [pc, #348]	; (80004e4 <main+0x31c>)
 8000388:	220e      	movs	r2, #14
 800038a:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	4856      	ldr	r0, [pc, #344]	; (80004ec <main+0x324>)
 8000392:	f001 f855 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	2202      	movs	r2, #2
 800039a:	4952      	ldr	r1, [pc, #328]	; (80004e4 <main+0x31c>)
 800039c:	4852      	ldr	r0, [pc, #328]	; (80004e8 <main+0x320>)
 800039e:	f001 ff20 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2140      	movs	r1, #64	; 0x40
 80003a6:	4851      	ldr	r0, [pc, #324]	; (80004ec <main+0x324>)
 80003a8:	f001 f84a 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi frekvenco na 2400 + 76 MHz
	TxSPI[0] = 0x05 | (1 << 5);
 80003ac:	4b4d      	ldr	r3, [pc, #308]	; (80004e4 <main+0x31c>)
 80003ae:	2225      	movs	r2, #37	; 0x25
 80003b0:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 76;
 80003b2:	4b4c      	ldr	r3, [pc, #304]	; (80004e4 <main+0x31c>)
 80003b4:	224c      	movs	r2, #76	; 0x4c
 80003b6:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	484b      	ldr	r0, [pc, #300]	; (80004ec <main+0x324>)
 80003be:	f001 f83f 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	2202      	movs	r2, #2
 80003c6:	4947      	ldr	r1, [pc, #284]	; (80004e4 <main+0x31c>)
 80003c8:	4847      	ldr	r0, [pc, #284]	; (80004e8 <main+0x320>)
 80003ca:	f001 ff0a 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	4846      	ldr	r0, [pc, #280]	; (80004ec <main+0x324>)
 80003d4:	f001 f834 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi SETUP_RETR register
	TxSPI[0] = 0x04 | (1 << 5);
 80003d8:	4b42      	ldr	r3, [pc, #264]	; (80004e4 <main+0x31c>)
 80003da:	2224      	movs	r2, #36	; 0x24
 80003dc:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x2F;
 80003de:	4b41      	ldr	r3, [pc, #260]	; (80004e4 <main+0x31c>)
 80003e0:	222f      	movs	r2, #47	; 0x2f
 80003e2:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2140      	movs	r1, #64	; 0x40
 80003e8:	4840      	ldr	r0, [pc, #256]	; (80004ec <main+0x324>)
 80003ea:	f001 f829 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 80003ee:	2364      	movs	r3, #100	; 0x64
 80003f0:	2202      	movs	r2, #2
 80003f2:	493c      	ldr	r1, [pc, #240]	; (80004e4 <main+0x31c>)
 80003f4:	483c      	ldr	r0, [pc, #240]	; (80004e8 <main+0x320>)
 80003f6:	f001 fef4 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	483b      	ldr	r0, [pc, #236]	; (80004ec <main+0x324>)
 8000400:	f001 f81e 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi RF_SETUP register
	TxSPI[0] = 0x06 | (1 << 5);
 8000404:	4b37      	ldr	r3, [pc, #220]	; (80004e4 <main+0x31c>)
 8000406:	2226      	movs	r2, #38	; 0x26
 8000408:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x08;
 800040a:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <main+0x31c>)
 800040c:	2208      	movs	r2, #8
 800040e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	4835      	ldr	r0, [pc, #212]	; (80004ec <main+0x324>)
 8000416:	f001 f813 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 800041a:	2364      	movs	r3, #100	; 0x64
 800041c:	2202      	movs	r2, #2
 800041e:	4931      	ldr	r1, [pc, #196]	; (80004e4 <main+0x31c>)
 8000420:	4831      	ldr	r0, [pc, #196]	; (80004e8 <main+0x320>)
 8000422:	f001 fede 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	4830      	ldr	r0, [pc, #192]	; (80004ec <main+0x324>)
 800042c:	f001 f808 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Nastavi STATUS register
	TxSPI[0] = 0x07 | (1 << 5);
 8000430:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <main+0x31c>)
 8000432:	2227      	movs	r2, #39	; 0x27
 8000434:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x70;
 8000436:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <main+0x31c>)
 8000438:	2270      	movs	r2, #112	; 0x70
 800043a:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	482a      	ldr	r0, [pc, #168]	; (80004ec <main+0x324>)
 8000442:	f000 fffd 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2202      	movs	r2, #2
 800044a:	4926      	ldr	r1, [pc, #152]	; (80004e4 <main+0x31c>)
 800044c:	4826      	ldr	r0, [pc, #152]	; (80004e8 <main+0x320>)
 800044e:	f001 fec8 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4825      	ldr	r0, [pc, #148]	; (80004ec <main+0x324>)
 8000458:	f000 fff2 	bl	8001440 <HAL_GPIO_WritePin>
	
	// Splakni RX in TXbuffer
	TxSPI[0] = 0xE2;	// Splakni RX buffer
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <main+0x31c>)
 800045e:	22e2      	movs	r2, #226	; 0xe2
 8000460:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2140      	movs	r1, #64	; 0x40
 8000466:	4821      	ldr	r0, [pc, #132]	; (80004ec <main+0x324>)
 8000468:	f000 ffea 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 1, 100);
 800046c:	2364      	movs	r3, #100	; 0x64
 800046e:	2201      	movs	r2, #1
 8000470:	491c      	ldr	r1, [pc, #112]	; (80004e4 <main+0x31c>)
 8000472:	481d      	ldr	r0, [pc, #116]	; (80004e8 <main+0x320>)
 8000474:	f001 feb5 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	481b      	ldr	r0, [pc, #108]	; (80004ec <main+0x324>)
 800047e:	f000 ffdf 	bl	8001440 <HAL_GPIO_WritePin>
	
	TxSPI[0] = 0xE1;	// Splakni TX buffer
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <main+0x31c>)
 8000484:	22e1      	movs	r2, #225	; 0xe1
 8000486:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2140      	movs	r1, #64	; 0x40
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <main+0x324>)
 800048e:	f000 ffd7 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 1, 100);
 8000492:	2364      	movs	r3, #100	; 0x64
 8000494:	2201      	movs	r2, #1
 8000496:	4913      	ldr	r1, [pc, #76]	; (80004e4 <main+0x31c>)
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <main+0x320>)
 800049a:	f001 fea2 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2140      	movs	r1, #64	; 0x40
 80004a2:	4812      	ldr	r0, [pc, #72]	; (80004ec <main+0x324>)
 80004a4:	f000 ffcc 	bl	8001440 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		i = 0;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <main+0x328>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
		j = 1;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <main+0x32c>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	601a      	str	r2, [r3, #0]
		
		if(ijklm)
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <main+0x330>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d040      	beq.n	800053e <main+0x376>
		{
			stevec1 = 0;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <main+0x334>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
			TIM2->DIER |= (1 << TIM_DIER_CC1IE_Pos);
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	60d3      	str	r3, [r2, #12]
			TIM2->CR1 |= (1 << TIM_CR1_CEN_Pos);
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
			
			while(TIM2->CR1 & (1 << TIM_CR1_CEN_Pos))
 80004e2:	e022      	b.n	800052a <main+0x362>
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20001004 	.word	0x20001004
 80004ec:	48000400 	.word	0x48000400
 80004f0:	2000004c 	.word	0x2000004c
 80004f4:	20000050 	.word	0x20000050
 80004f8:	20000048 	.word	0x20000048
 80004fc:	20000014 	.word	0x20000014
			{
				sprejmiRadio();
 8000500:	f000 f9a8 	bl	8000854 <sprejmiRadio>
				podatki[stevec] = (test[1] << 8) | test[2];
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <main+0x3d4>)
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b219      	sxth	r1, r3
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <main+0x3d4>)
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	b21a      	sxth	r2, r3
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <main+0x3d8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	b211      	sxth	r1, r2
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <main+0x3dc>)
 800051c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				stevec++;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <main+0x3d8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <main+0x3d8>)
 8000528:	6013      	str	r3, [r2, #0]
			while(TIM2->CR1 & (1 << TIM_CR1_CEN_Pos))
 800052a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1e3      	bne.n	8000500 <main+0x338>
			}
			ijklm = 0;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x3e0>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
		}
		
		if (j)
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <main+0x3e4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <main+0x382>
		{
			sprejmiRadio();
 8000546:	f000 f985 	bl	8000854 <sprejmiRadio>
		}

		
		accx = (test[1] << 8) | test[2];
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0x3d4>)
 800054c:	785b      	ldrb	r3, [r3, #1]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	b21a      	sxth	r2, r3
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <main+0x3d4>)
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21a      	sxth	r2, r3
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <main+0x3e8>)
 800055e:	801a      	strh	r2, [r3, #0]
		accy = (test[3] << 8) | test[4];
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <main+0x3d4>)
 8000562:	78db      	ldrb	r3, [r3, #3]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b21a      	sxth	r2, r3
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0x3d4>)
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	b21b      	sxth	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b21a      	sxth	r2, r3
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0x3ec>)
 8000574:	801a      	strh	r2, [r3, #0]
		accz = (test[5] << 8) | test[6];
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0x3d4>)
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	b21a      	sxth	r2, r3
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <main+0x3d4>)
 8000580:	799b      	ldrb	r3, [r3, #6]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <main+0x3f0>)
 800058a:	801a      	strh	r2, [r3, #0]
		
		if (i)
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0x3f4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d089      	beq.n	80004a8 <main+0x2e0>
		{
			posljiRadio();
 8000594:	f000 fa0e 	bl	80009b4 <posljiRadio>
		i = 0;
 8000598:	e786      	b.n	80004a8 <main+0x2e0>
 800059a:	bf00      	nop
 800059c:	20000054 	.word	0x20000054
 80005a0:	20000010 	.word	0x20000010
 80005a4:	20000064 	.word	0x20000064
 80005a8:	20000048 	.word	0x20000048
 80005ac:	20000050 	.word	0x20000050
 80005b0:	20000040 	.word	0x20000040
 80005b4:	20000042 	.word	0x20000042
 80005b8:	20000044 	.word	0x20000044
 80005bc:	2000004c 	.word	0x2000004c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ff6a 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f0:	2303      	movs	r3, #3
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ff93 	bl	8001538 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000618:	f000 fa82 	bl	8000b20 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2104      	movs	r1, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fb65 	bl	8001d04 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000640:	f000 fa6e 	bl	8000b20 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000648:	f000 ff20 	bl	800148c <HAL_PWREx_ControlVoltageScaling>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 fa65 	bl	8000b20 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	; 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_SPI1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_SPI1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_SPI1_Init+0x74>)
 800066c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_SPI1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI1_Init+0x74>)
 800067a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800067e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI1_Init+0x74>)
 800068e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000692:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI1_Init+0x74>)
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006ae:	2207      	movs	r2, #7
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006ba:	2208      	movs	r2, #8
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_SPI1_Init+0x74>)
 80006c0:	f001 fcec 	bl	800209c <HAL_SPI_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 fa29 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20001004 	.word	0x20001004
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_TIM2_Init+0x98>)
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_TIM2_Init+0x98>)
 8000704:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_TIM2_Init+0x98>)
 8000712:	4a19      	ldr	r2, [pc, #100]	; (8000778 <MX_TIM2_Init+0x9c>)
 8000714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_TIM2_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_TIM2_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <MX_TIM2_Init+0x98>)
 8000724:	f002 fbc2 	bl	8002eac <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800072e:	f000 f9f7 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_TIM2_Init+0x98>)
 8000740:	f002 fc0b 	bl	8002f5a <HAL_TIM_ConfigClockSource>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800074a:	f000 f9e9 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_TIM2_Init+0x98>)
 800075c:	f002 fdf8 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000766:	f000 f9db 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20001068 	.word	0x20001068
 8000778:	00013880 	.word	0x00013880

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0xcc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <MX_GPIO_Init+0xcc>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4815      	ldr	r0, [pc, #84]	; (800084c <MX_GPIO_Init+0xd0>)
 80007f8:	f000 fe22 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000802:	f000 fe1d 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xd0>)
 800081e:	f000 fc65 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xd4>)
 800083a:	f000 fc57 	bl	80010ec <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800
 8000850:	48000400 	.word	0x48000400

08000854 <sprejmiRadio>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

}

void sprejmiRadio()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	// 1. postavi PRIM_RX = 1
	TxSPI[0] = 0x00 | (1 << 5);
 8000858:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <sprejmiRadio+0x144>)
 800085a:	2220      	movs	r2, #32
 800085c:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x0F;
 800085e:	4b4e      	ldr	r3, [pc, #312]	; (8000998 <sprejmiRadio+0x144>)
 8000860:	220f      	movs	r2, #15
 8000862:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	484c      	ldr	r0, [pc, #304]	; (800099c <sprejmiRadio+0x148>)
 800086a:	f000 fde9 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2202      	movs	r2, #2
 8000872:	4949      	ldr	r1, [pc, #292]	; (8000998 <sprejmiRadio+0x144>)
 8000874:	484a      	ldr	r0, [pc, #296]	; (80009a0 <sprejmiRadio+0x14c>)
 8000876:	f001 fcb4 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4847      	ldr	r0, [pc, #284]	; (800099c <sprejmiRadio+0x148>)
 8000880:	f000 fdde 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);*/
	
	// 2. postavi CE=1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4846      	ldr	r0, [pc, #280]	; (80009a4 <sprejmiRadio+0x150>)
 800088a:	f000 fdd9 	bl	8001440 <HAL_GPIO_WritePin>
	
	// 3. pocakaj 1 ms
	HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 faf6 	bl	8000e80 <HAL_Delay>
	
	// 4. poslušam ali je kaj na liniji
	
	RxSPI[0] = 0x17;
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <sprejmiRadio+0x154>)
 8000896:	2217      	movs	r2, #23
 8000898:	701a      	strb	r2, [r3, #0]
  RxSPI[1] = 0xFF;
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <sprejmiRadio+0x154>)
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	483d      	ldr	r0, [pc, #244]	; (800099c <sprejmiRadio+0x148>)
 80008a6:	f000 fdcb 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, RxSPI, 2, 100);
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2202      	movs	r2, #2
 80008ae:	493e      	ldr	r1, [pc, #248]	; (80009a8 <sprejmiRadio+0x154>)
 80008b0:	483b      	ldr	r0, [pc, #236]	; (80009a0 <sprejmiRadio+0x14c>)
 80008b2:	f001 fe04 	bl	80024be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4838      	ldr	r0, [pc, #224]	; (800099c <sprejmiRadio+0x148>)
 80008bc:	f000 fdc0 	bl	8001440 <HAL_GPIO_WritePin>
	
	// poslušam toliko časa, dokler da ne pride nekaj na linijo
	while(!(RxSPI[0] & (1 << 6)))
 80008c0:	e015      	b.n	80008ee <sprejmiRadio+0x9a>
	{
		RxSPI[0] = 0x17;
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <sprejmiRadio+0x154>)
 80008c4:	2217      	movs	r2, #23
 80008c6:	701a      	strb	r2, [r3, #0]
    RxSPI[1] = 0xFF;
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <sprejmiRadio+0x154>)
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4832      	ldr	r0, [pc, #200]	; (800099c <sprejmiRadio+0x148>)
 80008d4:	f000 fdb4 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, RxSPI, 2, 100);
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	2202      	movs	r2, #2
 80008dc:	4932      	ldr	r1, [pc, #200]	; (80009a8 <sprejmiRadio+0x154>)
 80008de:	4830      	ldr	r0, [pc, #192]	; (80009a0 <sprejmiRadio+0x14c>)
 80008e0:	f001 fded 	bl	80024be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <sprejmiRadio+0x148>)
 80008ea:	f000 fda9 	bl	8001440 <HAL_GPIO_WritePin>
	while(!(RxSPI[0] & (1 << 6)))
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <sprejmiRadio+0x154>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0e3      	beq.n	80008c2 <sprejmiRadio+0x6e>
		
	}
	
	
	while(!(RxSPI[1] & (1 << 0)))
 80008fa:	e043      	b.n	8000984 <sprejmiRadio+0x130>
	{//podatki so prišli
		
		// 1. preberi podatke iz RX FIFOTA
		test[0] = 0x61;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <sprejmiRadio+0x158>)
 80008fe:	2261      	movs	r2, #97	; 0x61
 8000900:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4825      	ldr	r0, [pc, #148]	; (800099c <sprejmiRadio+0x148>)
 8000908:	f000 fd9a 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, test, 15, 100);
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	220f      	movs	r2, #15
 8000910:	4926      	ldr	r1, [pc, #152]	; (80009ac <sprejmiRadio+0x158>)
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <sprejmiRadio+0x14c>)
 8000914:	f001 fdd3 	bl	80024be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <sprejmiRadio+0x148>)
 800091e:	f000 fd8f 	bl	8001440 <HAL_GPIO_WritePin>
		
		stevec1++;
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <sprejmiRadio+0x15c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <sprejmiRadio+0x15c>)
 800092a:	6013      	str	r3, [r2, #0]
		
		// 2. pocisti RX_DR IRQ zastavico
		TxSPI[0] = 0x07 | (1 << 5);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <sprejmiRadio+0x144>)
 800092e:	2227      	movs	r2, #39	; 0x27
 8000930:	701a      	strb	r2, [r3, #0]
		TxSPI[1] = 0x70;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <sprejmiRadio+0x144>)
 8000934:	2270      	movs	r2, #112	; 0x70
 8000936:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4817      	ldr	r0, [pc, #92]	; (800099c <sprejmiRadio+0x148>)
 800093e:	f000 fd7f 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	2202      	movs	r2, #2
 8000946:	4914      	ldr	r1, [pc, #80]	; (8000998 <sprejmiRadio+0x144>)
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <sprejmiRadio+0x14c>)
 800094a:	f001 fc4a 	bl	80021e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <sprejmiRadio+0x148>)
 8000954:	f000 fd74 	bl	8001440 <HAL_GPIO_WritePin>
		
		// 3. preberi FIFO_STATUS, ce je še kaj podatkov v FIFOtu
		RxSPI[0] = 0x17;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <sprejmiRadio+0x154>)
 800095a:	2217      	movs	r2, #23
 800095c:	701a      	strb	r2, [r3, #0]
    RxSPI[1] = 0xFF;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <sprejmiRadio+0x154>)
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <sprejmiRadio+0x148>)
 800096a:	f000 fd69 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, RxSPI, 2, 100);
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2202      	movs	r2, #2
 8000972:	490d      	ldr	r1, [pc, #52]	; (80009a8 <sprejmiRadio+0x154>)
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <sprejmiRadio+0x14c>)
 8000976:	f001 fda2 	bl	80024be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <sprejmiRadio+0x148>)
 8000980:	f000 fd5e 	bl	8001440 <HAL_GPIO_WritePin>
	while(!(RxSPI[1] & (1 << 0)))
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <sprejmiRadio+0x154>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0b5      	beq.n	80008fc <sprejmiRadio+0xa8>

	}
	
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	48000400 	.word	0x48000400
 80009a0:	20001004 	.word	0x20001004
 80009a4:	48000800 	.word	0x48000800
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000054 	.word	0x20000054
 80009b0:	20000014 	.word	0x20000014

080009b4 <posljiRadio>:

void posljiRadio()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	// 1. postavi PRIM_RX = 0
	
	//postavi CE=0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	4852      	ldr	r0, [pc, #328]	; (8000b08 <posljiRadio+0x154>)
 80009be:	f000 fd3f 	bl	8001440 <HAL_GPIO_WritePin>
	
	TxSPI[0] = 0x00 | (1 << 5);
 80009c2:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <posljiRadio+0x158>)
 80009c4:	2220      	movs	r2, #32
 80009c6:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x0E;
 80009c8:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <posljiRadio+0x158>)
 80009ca:	220e      	movs	r2, #14
 80009cc:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	484f      	ldr	r0, [pc, #316]	; (8000b10 <posljiRadio+0x15c>)
 80009d4:	f000 fd34 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	2202      	movs	r2, #2
 80009dc:	494b      	ldr	r1, [pc, #300]	; (8000b0c <posljiRadio+0x158>)
 80009de:	484d      	ldr	r0, [pc, #308]	; (8000b14 <posljiRadio+0x160>)
 80009e0:	f001 fbff 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	4849      	ldr	r0, [pc, #292]	; (8000b10 <posljiRadio+0x15c>)
 80009ea:	f000 fd29 	bl	8001440 <HAL_GPIO_WritePin>
	
	TxSPI[0] = 0x07 | (1 << 5);
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <posljiRadio+0x158>)
 80009f0:	2227      	movs	r2, #39	; 0x27
 80009f2:	701a      	strb	r2, [r3, #0]
	TxSPI[1] = 0x70;
 80009f4:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <posljiRadio+0x158>)
 80009f6:	2270      	movs	r2, #112	; 0x70
 80009f8:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4844      	ldr	r0, [pc, #272]	; (8000b10 <posljiRadio+0x15c>)
 8000a00:	f000 fd1e 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2202      	movs	r2, #2
 8000a08:	4940      	ldr	r1, [pc, #256]	; (8000b0c <posljiRadio+0x158>)
 8000a0a:	4842      	ldr	r0, [pc, #264]	; (8000b14 <posljiRadio+0x160>)
 8000a0c:	f001 fbe9 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	483e      	ldr	r0, [pc, #248]	; (8000b10 <posljiRadio+0x15c>)
 8000a16:	f000 fd13 	bl	8001440 <HAL_GPIO_WritePin>
	
	HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fa30 	bl	8000e80 <HAL_Delay>
	
	// 2. naloži podatke v pomnilnik
	test[0] = 0xA0; // naslov pomnilnika
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <posljiRadio+0x164>)
 8000a22:	22a0      	movs	r2, #160	; 0xa0
 8000a24:	701a      	strb	r2, [r3, #0]
	test[1] = 0x12;
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <posljiRadio+0x164>)
 8000a28:	2212      	movs	r2, #18
 8000a2a:	705a      	strb	r2, [r3, #1]
	test[2] = 0x34;
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <posljiRadio+0x164>)
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	709a      	strb	r2, [r3, #2]
	test[3] = 0x56;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <posljiRadio+0x164>)
 8000a34:	2256      	movs	r2, #86	; 0x56
 8000a36:	70da      	strb	r2, [r3, #3]
	test[4] = 0x78;
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <posljiRadio+0x164>)
 8000a3a:	2278      	movs	r2, #120	; 0x78
 8000a3c:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4833      	ldr	r0, [pc, #204]	; (8000b10 <posljiRadio+0x15c>)
 8000a44:	f000 fcfc 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, test, 15, 100);
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	4932      	ldr	r1, [pc, #200]	; (8000b18 <posljiRadio+0x164>)
 8000a4e:	4831      	ldr	r0, [pc, #196]	; (8000b14 <posljiRadio+0x160>)
 8000a50:	f001 fbc7 	bl	80021e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	482d      	ldr	r0, [pc, #180]	; (8000b10 <posljiRadio+0x15c>)
 8000a5a:	f000 fcf1 	bl	8001440 <HAL_GPIO_WritePin>
  
	// 3. pošlji vsaj 10 us pulz na CE za prenos paketa
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	4829      	ldr	r0, [pc, #164]	; (8000b08 <posljiRadio+0x154>)
 8000a64:	f000 fcec 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a68:	2014      	movs	r0, #20
 8000a6a:	f000 fa09 	bl	8000e80 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	4825      	ldr	r0, [pc, #148]	; (8000b08 <posljiRadio+0x154>)
 8000a74:	f000 fce4 	bl	8001440 <HAL_GPIO_WritePin>
  
	// 4. ali so podatki prišli?
	RxSPI[0] = 0x08;
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <posljiRadio+0x168>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	701a      	strb	r2, [r3, #0]
	RxSPI[1] = 0xFF;
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <posljiRadio+0x168>)
 8000a80:	22ff      	movs	r2, #255	; 0xff
 8000a82:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <posljiRadio+0x15c>)
 8000a8a:	f000 fcd9 	bl	8001440 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, RxSPI, 2, 100);
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	2202      	movs	r2, #2
 8000a92:	4922      	ldr	r1, [pc, #136]	; (8000b1c <posljiRadio+0x168>)
 8000a94:	481f      	ldr	r0, [pc, #124]	; (8000b14 <posljiRadio+0x160>)
 8000a96:	f001 fd12 	bl	80024be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <posljiRadio+0x15c>)
 8000aa0:	f000 fcce 	bl	8001440 <HAL_GPIO_WritePin>
	
	if(RxSPI[0] & (1 << 5))
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <posljiRadio+0x168>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f003 0320 	and.w	r3, r3, #32
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d016      	beq.n	8000ade <posljiRadio+0x12a>
	{//podatki so bili dostavljeni
		TxSPI[0] = 0x07 | (1 << 5);
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <posljiRadio+0x158>)
 8000ab2:	2227      	movs	r2, #39	; 0x27
 8000ab4:	701a      	strb	r2, [r3, #0]
		TxSPI[1] = 0x70;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <posljiRadio+0x158>)
 8000ab8:	2270      	movs	r2, #112	; 0x70
 8000aba:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <posljiRadio+0x15c>)
 8000ac2:	f000 fcbd 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, TxSPI, 2, 100);
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	2202      	movs	r2, #2
 8000aca:	4910      	ldr	r1, [pc, #64]	; (8000b0c <posljiRadio+0x158>)
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <posljiRadio+0x160>)
 8000ace:	f001 fb88 	bl	80021e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <posljiRadio+0x15c>)
 8000ad8:	f000 fcb2 	bl	8001440 <HAL_GPIO_WritePin>
		TxSPI[0] = 0xE1;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi1, TxSPI, 1, 100);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 8000adc:	e012      	b.n	8000b04 <posljiRadio+0x150>
		TxSPI[0] = 0xE1;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <posljiRadio+0x158>)
 8000ae0:	22e1      	movs	r2, #225	; 0xe1
 8000ae2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <posljiRadio+0x15c>)
 8000aea:	f000 fca9 	bl	8001440 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, TxSPI, 1, 100);
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4906      	ldr	r1, [pc, #24]	; (8000b0c <posljiRadio+0x158>)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <posljiRadio+0x160>)
 8000af6:	f001 fb74 	bl	80021e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <posljiRadio+0x15c>)
 8000b00:	f000 fc9e 	bl	8001440 <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	20001004 	.word	0x20001004
 8000b18:	20000054 	.word	0x20000054
 8000b1c:	20000008 	.word	0x20000008

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x4>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6593      	str	r3, [r2, #88]	; 0x58
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x7c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d128      	bne.n	8000be4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23e0      	movs	r3, #224	; 0xe0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fa84 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40013000 	.word	0x40013000
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 fa2b 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f000 fa44 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8d6 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
 8000c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca6:	f023 0301 	bic.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
  TIM2->CNT = 0;
 8000cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->SR =0;
 8000cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <SystemInit+0x64>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <SystemInit+0x64>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <SystemInit+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <SystemInit+0x68>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <SystemInit+0x68>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <SystemInit+0x68>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <SystemInit+0x68>)
 8000cf4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cf8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cfc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <SystemInit+0x68>)
 8000d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <SystemInit+0x68>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <SystemInit+0x68>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <SystemInit+0x68>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SystemInit+0x64>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	40021000 	.word	0x40021000

08000d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff ffc6 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
	ldr	r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <LoopForever+0x16>)
	cmp	r2, r3
 8000d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f002 fb7d 	bl	8003460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d66:	f7ff fa2f 	bl	80001c8 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d70:	08003518 	.word	0x08003518
	ldr	r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d78:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000d7c:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000d80:	200010b8 	.word	0x200010b8

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_Init+0x3c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_Init+0x3c>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 f962 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f80f 	bl	8000dc8 <HAL_InitTick>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	e001      	b.n	8000dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db6:	f7ff feb7 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d023      	beq.n	8000e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_InitTick+0x70>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_InitTick+0x6c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f96d 	bl	80010d2 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d809      	bhi.n	8000e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f937 	bl	800107e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_InitTick+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e007      	b.n	8000e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e004      	b.n	8000e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e001      	b.n	8000e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000020 	.word	0x20000020
 8000e38:	20000018 	.word	0x20000018
 8000e3c:	2000001c 	.word	0x2000001c

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000020 	.word	0x20000020
 8000e64:	200010b4 	.word	0x200010b4

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200010b4 	.word	0x200010b4

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000020 	.word	0x20000020

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e17f      	b.n	80013fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8171 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d00b      	beq.n	8001134 <HAL_GPIO_Init+0x48>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d007      	beq.n	8001134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001128:	2b11      	cmp	r3, #17
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b12      	cmp	r3, #18
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f003 0201 	and.w	r2, r3, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d118      	bne.n	80011d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x128>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b12      	cmp	r3, #18
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ac 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_GPIO_Init+0x330>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a5e      	ldr	r2, [pc, #376]	; (800141c <HAL_GPIO_Init+0x330>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_GPIO_Init+0x330>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <HAL_GPIO_Init+0x334>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x242>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x232>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4a      	ldr	r2, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x22a>
 8001312:	2306      	movs	r3, #6
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001316:	2307      	movs	r3, #7
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132e:	2300      	movs	r3, #0
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x334>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_GPIO_Init+0x350>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <HAL_GPIO_Init+0x350>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_GPIO_Init+0x350>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_GPIO_Init+0x350>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_GPIO_Init+0x350>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_GPIO_Init+0x350>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_GPIO_Init+0x350>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_GPIO_Init+0x350>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f ae78 	bne.w	80010fc <HAL_GPIO_Init+0x10>
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	48001400 	.word	0x48001400
 8001438:	48001800 	.word	0x48001800
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800145c:	e002      	b.n	8001464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_PWREx_GetVoltageRange+0x18>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149a:	d130      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d038      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2232      	movs	r2, #50	; 0x32
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	e002      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	d102      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f8:	d110      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e00f      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150a:	d007      	beq.n	800151c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40007000 	.word	0x40007000
 8001530:	20000018 	.word	0x20000018
 8001534:	431bde83 	.word	0x431bde83

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001554:	4b9e      	ldr	r3, [pc, #632]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80e4 	beq.w	8001734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_RCC_OscConfig+0x4a>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	f040 808b 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8087 	bne.w	8001690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	4b93      	ldr	r3, [pc, #588]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x62>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e3ac      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <HAL_RCC_OscConfig+0x7c>
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b2:	e005      	b.n	80015c0 <HAL_RCC_OscConfig+0x88>
 80015b4:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d223      	bcs.n	800160c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fd07 	bl	8001fdc <RCC_SetFlashLatencyFromMSIRange>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e38d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7c      	ldr	r2, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4977      	ldr	r1, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	4972      	ldr	r1, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
 800160a:	e025      	b.n	8001658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	496a      	ldr	r1, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162a:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4965      	ldr	r1, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fcc7 	bl	8001fdc <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e34d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001658:	f000 fc36 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	495a      	ldr	r1, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x29c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x2a0>)
 8001676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <HAL_RCC_OscConfig+0x2a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fba3 	bl	8000dc8 <HAL_InitTick>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d052      	beq.n	8001732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	e331      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d032      	beq.n	80016fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001698:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fbe0 	bl	8000e68 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ac:	f7ff fbdc 	bl	8000e68 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e31a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	493b      	ldr	r1, [pc, #236]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e01a      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170a:	f7ff fbad 	bl	8000e68 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff fba9 	bl	8000e68 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e2e7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x1da>
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d074      	beq.n	800182a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x21a>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d10e      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d10b      	bne.n	800176a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d064      	beq.n	8001828 <HAL_RCC_OscConfig+0x2f0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d160      	bne.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e2c4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x24a>
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e01d      	b.n	80017be <HAL_RCC_OscConfig+0x286>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x26e>
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x286>
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_RCC_OscConfig+0x298>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01c      	beq.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb4f 	bl	8000e68 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017cc:	e011      	b.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	080034d0 	.word	0x080034d0
 80017d8:	20000018 	.word	0x20000018
 80017dc:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb42 	bl	8000e68 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e280      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	4baf      	ldr	r3, [pc, #700]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2a8>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb32 	bl	8000e68 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fb2e 	bl	8000e68 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e26c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	4ba5      	ldr	r3, [pc, #660]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x2d0>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d060      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x310>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d119      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d116      	bne.n	8001876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	4b99      	ldr	r3, [pc, #612]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x328>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e249      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b93      	ldr	r3, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4990      	ldr	r1, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	e040      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d023      	beq.n	80018c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8b      	ldr	r2, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff faed 	bl	8000e68 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fae9 	bl	8000e68 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e227      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	497c      	ldr	r1, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e018      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fac9 	bl	8000e68 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fac5 	bl	8000e68 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e203      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01c      	beq.n	8001946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	4a67      	ldr	r2, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff faa4 	bl	8000e68 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff faa0 	bl	8000e68 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1de      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x3ec>
 8001944:	e01b      	b.n	800197e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fa87 	bl	8000e68 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fa83 	bl	8000e68 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1c1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a6 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6593      	str	r3, [r2, #88]	; 0x58
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d118      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa4a 	bl	8000e68 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fa46 	bl	8000e68 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e184      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x57c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d8>
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_OscConfig+0x522>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d110      	bne.n	8001a3a <HAL_RCC_OscConfig+0x502>
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a38:	e00f      	b.n	8001a5a <HAL_RCC_OscConfig+0x522>
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa01 	bl	8000e68 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f9fd 	bl	8000e68 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e139      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x578>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ed      	beq.n	8001a6a <HAL_RCC_OscConfig+0x532>
 8001a8e:	e01a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f9ea 	bl	8000e68 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f9e6 	bl	8000e68 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d906      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e122      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab8:	4b90      	ldr	r3, [pc, #576]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1e8      	bne.n	8001a98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	4a8a      	ldr	r2, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8108 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 80d0 	bne.w	8001c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aec:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d130      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d127      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d11f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2c:	2a07      	cmp	r2, #7
 8001b2e:	bf14      	ite	ne
 8001b30:	2201      	movne	r2, #1
 8001b32:	2200      	moveq	r2, #0
 8001b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d113      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d06e      	beq.n	8001c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d069      	beq.n	8001c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b74:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b84:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b90:	f7ff f96a 	bl	8000e68 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f966 	bl	8000e68 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0a4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	4b54      	ldr	r3, [pc, #336]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_RCC_OscConfig+0x7c8>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bd8:	0852      	lsrs	r2, r2, #1
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0552      	lsls	r2, r2, #21
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001be4:	0852      	lsrs	r2, r2, #1
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0652      	lsls	r2, r2, #25
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf0:	0912      	lsrs	r2, r2, #4
 8001bf2:	0452      	lsls	r2, r2, #17
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4941      	ldr	r1, [pc, #260]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a3b      	ldr	r2, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f928 	bl	8000e68 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f924 	bl	8000e68 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e062      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	e05a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e059      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d152      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7ff f900 	bl	8000e68 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f8fc 	bl	8000e68 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e03a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x734>
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d02d      	beq.n	8001cee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb0:	f023 0303 	bic.w	r3, r3, #3
 8001cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f8cf 	bl	8000e68 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f8cb 	bl	8000e68 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e009      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x796>
 8001cec:	e001      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	f99d808c 	.word	0xf99d808c

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0c8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4961      	ldr	r1, [pc, #388]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d04c      	beq.n	8001dee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d121      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e09e      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e092      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e086      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e07e      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 0203 	bic.w	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	493f      	ldr	r1, [pc, #252]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbe:	f7ff f853 	bl	8000e68 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7ff f84f 	bl	8000e68 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e066      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 020c 	and.w	r2, r3, #12
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d1eb      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d210      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e036      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4918      	ldr	r1, [pc, #96]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4910      	ldr	r1, [pc, #64]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e7a:	f000 f825 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	490c      	ldr	r1, [pc, #48]	; (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	5ccb      	ldrb	r3, [r1, r3]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff92 	bl	8000dc8 <HAL_InitTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080034d0 	.word	0x080034d0
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	2000001c 	.word	0x2000001c

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x34>
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d121      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d11e      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e005      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	e004      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d134      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d003      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0xac>
 8001f6c:	e005      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f70:	617b      	str	r3, [r7, #20]
      break;
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f76:	617b      	str	r3, [r7, #20]
      break;
 8001f78:	e002      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	617b      	str	r3, [r7, #20]
      break;
 8001f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	fb02 f203 	mul.w	r2, r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0e5b      	lsrs	r3, r3, #25
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	080034e0 	.word	0x080034e0
 8001fd8:	00f42400 	.word	0x00f42400

08001fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ff4:	f7ff fa3c 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 8001ff8:	6178      	str	r0, [r7, #20]
 8001ffa:	e014      	b.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a24      	ldr	r2, [pc, #144]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002014:	f7ff fa2c 	bl	8001470 <HAL_PWREx_GetVoltageRange>
 8002018:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d10b      	bne.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d919      	bls.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2ba0      	cmp	r3, #160	; 0xa0
 8002038:	d902      	bls.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800203a:	2302      	movs	r3, #2
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e013      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e010      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d902      	bls.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800204c:	2303      	movs	r3, #3
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e00a      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d102      	bne.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e004      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b70      	cmp	r3, #112	; 0x70
 8002062:	d101      	bne.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 0207 	bic.w	r2, r3, #7
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e095      	b.n	80021da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020be:	d009      	beq.n	80020d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fd3e 	bl	8000b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002114:	d902      	bls.n	800211c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e002      	b.n	8002122 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800211c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002120:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800212a:	d007      	beq.n	800213c <HAL_SPI_Init+0xa0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002134:	d002      	beq.n	800213c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	ea42 0103 	orr.w	r1, r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	f003 0204 	and.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021b8:	ea42 0103 	orr.w	r1, r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_Transmit+0x22>
 8002200:	2302      	movs	r3, #2
 8002202:	e158      	b.n	80024b6 <HAL_SPI_Transmit+0x2d4>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220c:	f7fe fe2c 	bl	8000e68 <HAL_GetTick>
 8002210:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d002      	beq.n	8002228 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002226:	e13d      	b.n	80024a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x52>
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002238:	e134      	b.n	80024a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002284:	d10f      	bne.n	80022a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d007      	beq.n	80022c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022cc:	d94b      	bls.n	8002366 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_SPI_Transmit+0xfa>
 80022d6:	8afb      	ldrh	r3, [r7, #22]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d13e      	bne.n	800235a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002300:	e02b      	b.n	800235a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d112      	bne.n	8002336 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	1c9a      	adds	r2, r3, #2
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002334:	e011      	b.n	800235a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002336:	f7fe fd97 	bl	8000e68 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d803      	bhi.n	800234e <HAL_SPI_Transmit+0x16c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d102      	bne.n	8002354 <HAL_SPI_Transmit+0x172>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002358:	e0a4      	b.n	80024a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ce      	bne.n	8002302 <HAL_SPI_Transmit+0x120>
 8002364:	e07c      	b.n	8002460 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_SPI_Transmit+0x192>
 800236e:	8afb      	ldrh	r3, [r7, #22]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d170      	bne.n	8002456 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d912      	bls.n	80023a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	1c9a      	adds	r2, r3, #2
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b02      	subs	r3, #2
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023a2:	e058      	b.n	8002456 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023ca:	e044      	b.n	8002456 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d12b      	bne.n	8002432 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d912      	bls.n	800240a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b02      	subs	r3, #2
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002408:	e025      	b.n	8002456 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002430:	e011      	b.n	8002456 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002432:	f7fe fd19 	bl	8000e68 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d803      	bhi.n	800244a <HAL_SPI_Transmit+0x268>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d102      	bne.n	8002450 <HAL_SPI_Transmit+0x26e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002454:	e026      	b.n	80024a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1b5      	bne.n	80023cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fcdb 	bl	8002e20 <SPI_EndRxTxTransaction>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e000      	b.n	80024a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80024a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b088      	sub	sp, #32
 80024c2:	af02      	add	r7, sp, #8
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024da:	d112      	bne.n	8002502 <HAL_SPI_Receive+0x44>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10e      	bne.n	8002502 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2204      	movs	r2, #4
 80024e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f910 	bl	800271e <HAL_SPI_TransmitReceive>
 80024fe:	4603      	mov	r3, r0
 8002500:	e109      	b.n	8002716 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_SPI_Receive+0x52>
 800250c:	2302      	movs	r3, #2
 800250e:	e102      	b.n	8002716 <HAL_SPI_Receive+0x258>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002518:	f7fe fca6 	bl	8000e68 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800252e:	e0e9      	b.n	8002704 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_Receive+0x7e>
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002540:	e0e0      	b.n	8002704 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2204      	movs	r2, #4
 8002546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800258c:	d908      	bls.n	80025a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d10f      	bne.n	80025da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d007      	beq.n	80025f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002600:	d867      	bhi.n	80026d2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002602:	e030      	b.n	8002666 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d117      	bne.n	8002642 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f103 020c 	add.w	r2, r3, #12
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002640:	e011      	b.n	8002666 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002642:	f7fe fc11 	bl	8000e68 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d803      	bhi.n	800265a <HAL_SPI_Receive+0x19c>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d102      	bne.n	8002660 <HAL_SPI_Receive+0x1a2>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002664:	e04e      	b.n	8002704 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1c8      	bne.n	8002604 <HAL_SPI_Receive+0x146>
 8002672:	e034      	b.n	80026de <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d115      	bne.n	80026ae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	b292      	uxth	r2, r2
 800268e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80026ac:	e011      	b.n	80026d2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ae:	f7fe fbdb 	bl	8000e68 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d803      	bhi.n	80026c6 <HAL_SPI_Receive+0x208>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d102      	bne.n	80026cc <HAL_SPI_Receive+0x20e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026d0:	e018      	b.n	8002704 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ca      	bne.n	8002674 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fb44 	bl	8002d70 <SPI_EndRxTransaction>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	75fb      	strb	r3, [r7, #23]
 8002700:	e000      	b.n	8002704 <HAL_SPI_Receive+0x246>
  }

error :
 8002702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002714:	7dfb      	ldrb	r3, [r7, #23]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08a      	sub	sp, #40	; 0x28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x26>
 8002740:	2302      	movs	r3, #2
 8002742:	e1fb      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x41e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274c:	f7fe fb8c 	bl	8000e68 <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002758:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002768:	7efb      	ldrb	r3, [r7, #27]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d00e      	beq.n	800278c <HAL_SPI_TransmitReceive+0x6e>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002774:	d106      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x66>
 800277e:	7efb      	ldrb	r3, [r7, #27]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d003      	beq.n	800278c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800278a:	e1cd      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_SPI_TransmitReceive+0x80>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_SPI_TransmitReceive+0x80>
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80027a4:	e1c0      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027fc:	d802      	bhi.n	8002804 <HAL_SPI_TransmitReceive+0xe6>
 80027fe:	8a3b      	ldrh	r3, [r7, #16]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d908      	bls.n	8002816 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e007      	b.n	8002826 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d007      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800284c:	d97c      	bls.n	8002948 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SPI_TransmitReceive+0x13e>
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d169      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	1c9a      	adds	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002880:	e056      	b.n	8002930 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d11b      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d113      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	1c9a      	adds	r2, r3, #2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d11c      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x1f2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	b292      	uxth	r2, r2
 80028ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002910:	f7fe faaa 	bl	8000e68 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291c:	429a      	cmp	r2, r3
 800291e:	d807      	bhi.n	8002930 <HAL_SPI_TransmitReceive+0x212>
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d003      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800292e:	e0fb      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1a3      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x164>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d19d      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x164>
 8002946:	e0df      	b.n	8002b08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x23a>
 8002950:	8a7b      	ldrh	r3, [r7, #18]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 80cb 	bne.w	8002aee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d912      	bls.n	8002988 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b02      	subs	r3, #2
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002986:	e0b2      	b.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ae:	e09e      	b.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d134      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02f      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d12c      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d912      	bls.n	80029fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b02      	subs	r3, #2
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029fc:	e012      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d148      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x3aa>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d042      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d923      	bls.n	8002a96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b02      	subs	r3, #2
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d81f      	bhi.n	8002ac4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	e016      	b.n	8002ac4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f103 020c 	add.w	r2, r3, #12
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ac8:	f7fe f9ce 	bl	8000e68 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d803      	bhi.n	8002ae0 <HAL_SPI_TransmitReceive+0x3c2>
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d102      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x3c8>
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002aec:	e01c      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f af5b 	bne.w	80029b0 <HAL_SPI_TransmitReceive+0x292>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f af54 	bne.w	80029b0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f987 	bl	8002e20 <SPI_EndRxTxTransaction>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	661a      	str	r2, [r3, #96]	; 0x60
 8002b24:	e000      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b54:	f7fe f988 	bl	8000e68 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b64:	f7fe f980 	bl	8000e68 <HAL_GetTick>
 8002b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	015b      	lsls	r3, r3, #5
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	e054      	b.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d050      	beq.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b84:	f7fe f970 	bl	8000e68 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d902      	bls.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb2:	d111      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbc:	d004      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d107      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d10f      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e017      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d19b      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000018 	.word	0x20000018

08002c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c62:	f7fe f901 	bl	8000e68 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c72:	f7fe f8f9 	bl	8000e68 <HAL_GetTick>
 8002c76:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00da      	lsls	r2, r3, #3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	0d1b      	lsrs	r3, r3, #20
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c90:	e05f      	b.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c98:	d106      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d050      	beq.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cb0:	f7fe f8da 	bl	8000e68 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13d      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cde:	d111      	bne.n	8002d04 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce8:	d004      	beq.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d107      	bne.n	8002d04 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0c:	d10f      	bne.n	8002d2e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e010      	b.n	8002d64 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d197      	bne.n	8002c92 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000018 	.word	0x20000018

08002d70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d84:	d111      	bne.n	8002daa <SPI_EndRxTransaction+0x3a>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8e:	d004      	beq.n	8002d9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d98:	d107      	bne.n	8002daa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fec5 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e023      	b.n	8002e18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd8:	d11d      	bne.n	8002e16 <SPI_EndRxTransaction+0xa6>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de2:	d004      	beq.n	8002dee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	d113      	bne.n	8002e16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff ff2a 	bl	8002c54 <SPI_WaitFifoStateUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e000      	b.n	8002e18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff ff0b 	bl	8002c54 <SPI_WaitFifoStateUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e027      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fe70 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e014      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff fee4 	bl	8002c54 <SPI_WaitFifoStateUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e000      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e049      	b.n	8002f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fe8e 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 f8fc 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_ConfigClockSource+0x18>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0b5      	b.n	80030de <HAL_TIM_ConfigClockSource+0x184>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d03e      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xd4>
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb4:	f200 8087 	bhi.w	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	f000 8085 	beq.w	80030ca <HAL_TIM_ConfigClockSource+0x170>
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d87f      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc6:	2b70      	cmp	r3, #112	; 0x70
 8002fc8:	d01a      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xa6>
 8002fca:	2b70      	cmp	r3, #112	; 0x70
 8002fcc:	d87b      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fce:	2b60      	cmp	r3, #96	; 0x60
 8002fd0:	d050      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x11a>
 8002fd2:	2b60      	cmp	r3, #96	; 0x60
 8002fd4:	d877      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd6:	2b50      	cmp	r3, #80	; 0x50
 8002fd8:	d03c      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0xfa>
 8002fda:	2b50      	cmp	r3, #80	; 0x50
 8002fdc:	d873      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d058      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0x13a>
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d86f      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe6:	2b30      	cmp	r3, #48	; 0x30
 8002fe8:	d064      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x15a>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d86b      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d060      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d867      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d05c      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x15a>
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d05a      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ffe:	e062      	b.n	80030c6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f000 f97e 	bl	8003310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003022:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e04e      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 f967 	bl	8003310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003050:	609a      	str	r2, [r3, #8]
      break;
 8003052:	e03b      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	f000 f8db 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2150      	movs	r1, #80	; 0x50
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f934 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 8003072:	e02b      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	461a      	mov	r2, r3
 8003082:	f000 f8fa 	bl	800327a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2160      	movs	r1, #96	; 0x60
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f924 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 8003092:	e01b      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f000 f8bb 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f914 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030b2:	e00b      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 f90b 	bl	80032da <TIM_ITRx_SetConfig>
        break;
 80030c4:	e002      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80030ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a40      	ldr	r2, [pc, #256]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d108      	bne.n	800313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <TIM_Base_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d01b      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d017      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <TIM_Base_SetConfig+0x128>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <TIM_Base_SetConfig+0x130>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00f      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <TIM_Base_SetConfig+0x124>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <TIM_Base_SetConfig+0x128>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <TIM_Base_SetConfig+0x130>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40013400 	.word	0x40013400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 030a 	bic.w	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 0307 	orr.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	431a      	orrs	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e068      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01d      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d018      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40013400 	.word	0x40013400
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40014000 	.word	0x40014000

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	4d0d      	ldr	r5, [pc, #52]	; (8003498 <__libc_init_array+0x38>)
 8003464:	4c0d      	ldr	r4, [pc, #52]	; (800349c <__libc_init_array+0x3c>)
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	2600      	movs	r6, #0
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	4d0b      	ldr	r5, [pc, #44]	; (80034a0 <__libc_init_array+0x40>)
 8003472:	4c0c      	ldr	r4, [pc, #48]	; (80034a4 <__libc_init_array+0x44>)
 8003474:	f000 f820 	bl	80034b8 <_init>
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	2600      	movs	r6, #0
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	f855 3b04 	ldr.w	r3, [r5], #4
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	08003510 	.word	0x08003510
 800349c:	08003510 	.word	0x08003510
 80034a0:	08003510 	.word	0x08003510
 80034a4:	08003514 	.word	0x08003514

080034a8 <memset>:
 80034a8:	4402      	add	r2, r0
 80034aa:	4603      	mov	r3, r0
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	f803 1b01 	strb.w	r1, [r3], #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
