
ArduinoNano_koda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000014f  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004f9  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000084  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000dd08  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  0000e630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0000035f  00000000  00000000  0000e670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	18 d0       	rcall	.+48     	; 0xa6 <main>
  76:	1c c0       	rjmp	.+56     	; 0xb0 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <SPI_MasterInit>:
}

void I2C_Begin(void)
{
    TWBR = 0x0C;
    TWSR |= 0x03;
  7a:	8c e2       	ldi	r24, 0x2C	; 44
  7c:	84 b9       	out	0x04, r24	; 4
  7e:	81 e5       	ldi	r24, 0x51	; 81
  80:	8c bd       	out	0x2c, r24	; 44
  82:	08 95       	ret

00000084 <SPI_MasterTransmit>:
  84:	8e bd       	out	0x2e, r24	; 46
  86:	0d b4       	in	r0, 0x2d	; 45
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <SPI_MasterTransmit+0x2>
  8c:	08 95       	ret

0000008e <Serial_begin>:
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
}

void Serial_begin(void)
{
    UBRR0H=UBRRH_VALUE;    //define baud rate
  8e:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L=UBRRL_VALUE;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);    //turn on TX and RX
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);	//8-bit communication
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	80 93 c2 00 	sts	0x00C2, r24
  a4:	08 95       	ret

000000a6 <main>:

int main (void)
{
	// Initialization code
	//DDRB |= (1<<PB5);
	SPI_MasterInit();
  a6:	e9 df       	rcall	.-46     	; 0x7a <SPI_MasterInit>
	//SPI_SlaveInit();
	Serial_begin();
  a8:	f2 df       	rcall	.-28     	; 0x8e <Serial_begin>
	while(1)
	{
		//PORTB ^= (1<<PB5);
		//_delay_ms(100);
		
		SPI_MasterTransmit('a');
  aa:	81 e6       	ldi	r24, 0x61	; 97
  ac:	eb df       	rcall	.-42     	; 0x84 <SPI_MasterTransmit>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x4>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
